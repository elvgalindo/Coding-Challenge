CSS
1. How can you switch a css style when the screen size is below a certain size?
    By using the '@media' rule and by establishing media types and features.

2. What is the benefit of using stylesheets instead of inline styles?
    It saves time and efforts by creating/editing the CSS code once and applying the changes to
    multiple web pages at the same time. It looks more organized. 

3. Is there a way to manage CSS with variables and functions?
    We can manage CSS stylesheets by assigning variables using '--' before the custom property and calling them
    by using the var() function. We can use other CSS functions to set values to CSS properties.

4. Review and update the following erroneous CSS:
    .button, input[type="submit"] {
    position: relative;
    display: inline-block;
    padding: 0px;
    margin: 0px;
    border: none;
    text-decoration: none;
    text-align: center;
    white-space: nowrap;
    overflow: visible;
    background-color: red;
    text-transform: uppercase;
    font-color: #ffb034;
    font-size: 18px;
    font-family: "FuturaPT-Book";
    line-height: 20px;
    height: 20px;
    -webkit-transition: color 0.2s ease-in-out;
    transition: color 0.2s ease-in-out;
    }

JavaScript
1. What’s the difference between the following three “car” approaches?
    function car(){} - Function with a return value.
    var car = car(); - Function used as variable value.
    var car = new car(); - Creates a plain JavaScript object.

2. Explain what AJAX is and it’s advantages/disadvantages.
    AJAX is a method of exchanging data with a server without reloading the entire page.
    advantages -
        Improves user experience
        Increases speed
        Easier navigation
    disadvantages -
        Browser incompatibility
        Difficult to debug
        Increased load in web server

3. Describe how event bubbling works in the context of clicking on the “Hello World” text:
   In the event bubbling, the event will be handled by the <span> tag frist, then the <div> tag and 
   lastly the <body> tag.
   <body>
        <div id=”container”>
            <span id=”textContainer”>Hello World</span>
        </div>
    </body>

4. Create a loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at
multiples of 5 and "fizzbuzz" at multiples of 3 and 5.

for ( var i = 1; i <= 100; i++) {
    if (i%3 === 0 && i%5 === 0) {
        console.log(i + "FizzBuzz");
    }
    else if (i%3 === 0) {
        console.log(i + "Fizz");
    }
    else if (i%5 === 0){
        console.log(i + "Buzz");
    }
    else {
        console.log (i);
    }
}

5. Please fix the following erroneous JavaScript code.
    /**
    * Returns the header element.
    *
    * @return {(object|null)} The JQuery header element or null if the element does not exist
    */
    function getHeaderElement() {
    // Get header element by its id.
    var header = $(“myHeader”);
        if (typeof header === 'undefined') {
            console.log(‘header element exists!”);
        } 
        else {
            console.log(“header element does not exist!“))
        }
        return header;
    }

Twig
Create a basic login form twig template that can be used on both an admin and player site.
Inputs
    username
    password,
    submit button
Template Variables
    submitButtonHTML = ‘<input type=”submit” value=”Log In”/>’
    loginHeaderText = ‘Log In’
    isAdminLogin = true or false
    totalSiteLogins = ‘0.00’

Criteria
1. Display totalSiteLogins variable below the form formatted as an integer.
Ex: 2.00 should display as 2
2. Display the loginHeaderText variable above form.
3. If the template is being used on an admin site, display the text “ADMIN” prepended to
the loginHeaderText variable. This can be determined by the state of the isAdminLogin
variable.
4. Use the submitButtonHTML variable to display the form submit button.
5. The form does not have to be functional (no javascript or css necessary).

<!DOCTYPE html>
<html>
    <body>
        <form action='/action.php' method='post'>
            Username: <br>
            <input type="text" name="userName">
            Password: <br>
            <input type="text" name="password">
            <div>
                <input type='submit' value="log in">
            </div>
        </form>
    </body>
</html>
